import { Alert, Button, Col, Flex, Image, Layout, List, Modal, Row, Typography } from 'antd';
import { AlertDto, AlertsApi } from 'api';
import { AdminSider } from 'components/Sider/AdminSider';
import { FooterLayout } from 'components/Footer';
import { Header } from 'components/Header';
import { isAdmin, isAnyCourseDementor, isAnyCoursePowerUser, isAnyMentor } from 'domain/user';
import { HomeSummary } from 'modules/Home/components/HomeSummary';
import { NoCourse } from 'modules/Home/components/NoCourse';
import { CourseSelector } from 'modules/Home/components/CourseSelector';
import { RegistryBanner } from 'modules/Home/components/RegistryBanner';
import { SystemAlerts } from 'modules/Home/components/SystemAlerts';
import { getCourseLinks } from 'modules/Home/data/links';
import { useStudentSummary } from 'modules/Home/hooks/useStudentSummary';
import Link from 'next/link';
import { useMemo, useState, useContext } from 'react';
import { useAsync } from 'react-use';
import { CoursesService } from 'services/courses';
import { MentorRegistryService } from 'services/mentorRegistry';
import { Course } from 'services/models';
import { SessionContext, useActiveCourseContext } from 'modules/Course/contexts';

const { Content } = Layout;

const mentorRegistryService = new MentorRegistryService();
const alertService = new AlertsApi();

export function HomePage() {
  const { courses = [], setCourse, course } = useActiveCourseContext();
  const session = useContext(SessionContext);

  // Dima's birthday modal
  // TODO: remove after 14.02.2023
  const isDima = useMemo(() => session?.githubId === 'dzmitry-varabei', [session]);
  const [isModalVisible, setIsModalVisible] = useState(isDima);

  const plannedCourses = (courses || []).filter(course => course.planned && !course.inviteOnly);
  const wasMentor = isAnyMentor(session);
  const hasRegistryBanner =
    !isAdmin(session) &&
    wasMentor &&
    plannedCourses.length > 0 &&
    plannedCourses.every(course => session.courses[course.id] == null);

  const isPowerUser = isAnyCoursePowerUser(session) || isAnyCourseDementor(session);
  const [allCourses, setAllCourses] = useState<Course[]>([]);
  const [preselectedCourses, setPreselectedCourses] = useState<Course[]>([]);
  const [alerts, setAlerts] = useState<AlertDto[]>([]);

  const courseLinks = useMemo(() => getCourseLinks(session, course), [course]);
  const [approvedCourse] = preselectedCourses.filter(course => !session.courses?.[course.id]);

  useAsync(async () => {
    const { data } = await alertService.getAlerts(true);
    setAlerts(data);
  });

  useAsync(async () => {
    const mentor = await mentorRegistryService.getMentor().catch(() => null);
    if (mentor == null) {
      return;
    }
    const allCourses = await new CoursesService().getCourses();
    const preselectedCourses = allCourses.filter(c => mentor?.preselectedCourses.includes(c.id));
    setAllCourses(allCourses);
    setPreselectedCourses(preselectedCourses);
  });

  const handleChangeCourse = (courseId: number) => {
    const course = courses.find(course => {
      return course.id === courseId;
    });
    if (course) {
      setCourse(course);
    }
  };

  const { courseTasks, studentSummary } = useStudentSummary(session, course);

  return (
    <Layout style={{ minHeight: '100vh', background: '#fff' }}>
      <Header />
      {/*will remove after 14.02.2023*/}
      {isModalVisible && (
        <Modal
          title="Happy Birthday, Dima!"
          open={isModalVisible}
          onCancel={() => setIsModalVisible(false)}
          onOk={() => setIsModalVisible(false)}
        >
          <Flex align="center" vertical gap={'small'}>
            <Typography.Text strong>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è, –î–∏–º–∞! üéâ</Typography.Text>
            <Typography.Text>–û—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ RS App –∏ –≤—Å–µ—Ö –≤ Rolling Scopes Community,</Typography.Text>
            <Typography.Text>
              –°–µ–≥–æ–¥–Ω—è –º—ã –æ—Ç–º–µ—á–∞–µ–º –Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–µ–Ω—å, –∞ —ç–ø–æ—Ö—É ‚Äì <br />
              –≠—Ä—É –î–∏–º—ã, –≤–µ–ª–∏—á–∞–π—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –ª–∏–¥–µ—Ä–∞!
            </Typography.Text>
            <Typography.Text>
              –¢—ã –∫–∞–∫ –≥—É—Ä—É JavaScript –≤ –º–∏—Ä–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, <br />
              –° —Ç–æ–±–æ–π –∫–∞–∂–¥—ã–π –±–∞–≥ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ feature, <br />
              –ö–∞–∂–¥—ã–π –¥–µ–¥–ª–∞–π–Ω ‚Äì –≤ –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ, <br />–ò –∫–∞–∂–¥–æ–µ —Å–æ–≤–µ—â–∞–Ω–∏–µ ‚Äì –≤ –∫–æ–º–µ–¥–∏–π–Ω–æ–µ —à–æ—É!
            </Typography.Text>
            <Typography.Text>
              –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä—É–∫–æ–≤–æ–¥–∏—à—å ‚Äì —Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å, <br />
              –ù–µ –ø—Ä–æ—Å—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å ‚Äì —Ç—ã —Å–æ–∑–¥–∞—ë—à—å –∏—Å–∫—É—Å—Å—Ç–≤–æ, <br />
              –ù–µ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–µ—à—å—Å—è ‚Äì –∞ –∑–∞—Å—Ç–∞–≤–ª—è–µ—à—å –Ω–∞—Å —Å–º–µ—è—Ç—å—Å—è, <br />–ò –¥–µ–ª–∞–µ—à—å –∫–∞–∂–¥—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å —á–µ–º-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω—ã–º.
            </Typography.Text>
            <Typography.Text>
              –°–µ–≥–æ–¥–Ω—è –º—ã –æ—Ç–º–µ—á–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, <br />
              –ù–æ –∏ –¥–µ–Ω—å, –∫–æ–≥–¥–∞ RS App –∏ Rolling Scopes –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è. <br />
              –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, –î–∏–º–∞! –û—Å—Ç–∞–≤–∞–π—Å—è –≤—Å–µ–≥–¥–∞ —Ç–∞–∫–∏–º –∂–µ –∫—Ä—É—Ç—ã–º, <br />–ò –ø—É—Å—Ç—å –∫–∞–∂–¥—ã–π —Ç–≤–æ–π –∫–æ–¥ –∫–æ–º–º–∏—Ç –±—É–¥–µ—Ç –±–µ–∑
              –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤!
            </Typography.Text>
            <Typography.Text strong>–° —É–≤–∞–∂–µ–Ω–∏–µ–º –∏ –ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏, –ö–æ–º–∞–Ω–¥–∞ RS App üéâüéàüéÇ</Typography.Text>
            <Image src={`/static/images/dima.jpg`} alt={'dima'} width={300} height={300} />
          </Flex>
        </Modal>
      )}
      <Layout style={{ background: '#fff' }}>
        {isPowerUser && <AdminSider courses={courses} activeCourse={course} />}
        <Content style={{ margin: 16, marginBottom: 32 }}>
          {!course && <NoCourse courses={allCourses} preselectedCourses={preselectedCourses} />}

          {approvedCourse && (
            <div style={{ margin: '16px 0' }}>
              <Alert
                type="success"
                showIcon
                message={`You are approved as a mentor to "${approvedCourse.name}" course`}
                description={
                  <Button type="primary" href={`/course/mentor/confirm?course=${approvedCourse.alias}`}>
                    Confirm Participation
                  </Button>
                }
              />
            </div>
          )}

          <SystemAlerts alerts={alerts} />

          {hasRegistryBanner && <RegistryBanner style={{ margin: '16px 0' }} />}

          <CourseSelector course={course} onChangeCourse={handleChangeCourse} courses={courses} />

          <Row gutter={24}>
            <Col xs={24} sm={12} md={10} lg={8} style={{ marginBottom: 16 }}>
              {courseLinks.length ? (
                <List
                  size="small"
                  bordered
                  dataSource={courseLinks}
                  renderItem={linkInfo => (
                    <List.Item key={linkInfo.url}>
                      <Link prefetch={false} href={linkInfo.url}>
                        {linkInfo.icon} {linkInfo.name}
                      </Link>
                    </List.Item>
                  )}
                />
              ) : null}
            </Col>
            <Col xs={24} sm={12} md={12} lg={16}>
              {studentSummary && <HomeSummary courseTasks={courseTasks} summary={studentSummary} />}
            </Col>
          </Row>
        </Content>
      </Layout>
      <FooterLayout />
    </Layout>
  );
}
