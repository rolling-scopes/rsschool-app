name: Pull Request CI

on:
  pull_request:
    branches: [master]
    paths-ignore:
      - 'tools/bumblebee/**'

concurrency:
  group: pr_${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  pr_lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore npm cache
        uses: actions/cache@v2
        env:
          cache-name: cache-npm
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
            ${{ runner.os }}-

      - name: Restore node_modules cache
        uses: actions/cache@v2
        env:
          cache-name: cache-node_modules
        with:
          path: |
            node_modules
            client/node_modules
            server/node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm install

      - name: Format & Lint (npm run lint && npm run ci:format)
        run: |
          npm run ci:format
          npm run lint

  pr_build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore npm cache
        uses: actions/cache@v2
        env:
          cache-name: cache-npm
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
            ${{ runner.os }}-

      - name: Restore node_modules cache
        uses: actions/cache@v2
        env:
          cache-name: cache-node_modules
        with:
          path: |
            node_modules
            client/node_modules
            server/node_modules
            nestjs/node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
            ${{ runner.os }}-

      - name: Restore Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to ECR
        uses: docker/login-action@v1
        if: ${{ contains(github.event.pull_request.labels.*.name, 'deploy') }}
        with:
          registry: 511361162520.dkr.ecr.eu-central-1.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install dependencies
        run: npm install

      - name: Build (npm run build)
        env:
          NODE_ENV: production
          RSSHCOOL_UI_GCP_MAPS_API_KEY: ${{ secrets.RSSHCOOL_UI_GCP_MAPS_API_KEY }}
        run: |
          npm run build

      - name: Set Image Tag
        id: image-tag
        working-directory: ./setup/deploy
        run: |
          mkdir -p /tmp/.buildx-cache
          mkdir -p /tmp/.buildx-cache-new
          echo "IMAGE_TAG=$(node branch-hash.js)" >> $GITHUB_ENV
          echo ::set-output name=IMAGE_TAG::$(node branch-hash.js)

      - name: Upload to CDN
        working-directory: ./client
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY  }}
          AWS_DEFAULT_REGION: eu-central-1
        run: |
          aws s3 cp .next/static s3://cdn.rs.school/_next/static/ --recursive --cache-control "public,max-age=15552000,immutable"

      - name: Build client lambda
        working-directory: ./client
        if: ${{ contains(github.event.pull_request.labels.*.name, 'deploy') }}
        run: |
          npm run build:lambda

      - name: Package Ð¡lient
        uses: docker/build-push-action@v2
        if: ${{ contains(github.event.pull_request.labels.*.name, 'deploy') }}
        with:
          context: ./client
          file: ./client/Dockerfile.lambda
          push: true
          tags: 511361162520.dkr.ecr.eu-central-1.amazonaws.com/rsschool-ui:${{ steps.image-tag.outputs.IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Pull AWS SSM Params
        uses: deptno/action-aws-ssm-to-dotenv@v1.3.2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-central-1
        with:
          ssm-path: /staging/app
          format: dotenv
          output: server/.env

      - name: Package Server
        uses: docker/build-push-action@v2
        if: ${{ contains(github.event.pull_request.labels.*.name, 'deploy') }}
        with:
          context: ./server
          file: ./server/Dockerfile.lambda
          push: true
          tags: 511361162520.dkr.ecr.eu-central-1.amazonaws.com/rsschool-server:${{ steps.image-tag.outputs.IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Pull AWS SSM Params
        uses: deptno/action-aws-ssm-to-dotenv@v1.3.2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-central-1
        with:
          ssm-path: /staging/app
          format: dotenv
          output: nestjs/.env

      - name: Package Nestjs
        uses: docker/build-push-action@v2
        if: ${{ contains(github.event.pull_request.labels.*.name, 'deploy') }}
        with:
          context: ./nestjs
          file: ./nestjs/Dockerfile.lambda
          push: true
          tags: 511361162520.dkr.ecr.eu-central-1.amazonaws.com/rsschool-nestjs:${{ steps.image-tag.outputs.IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  pr_deploy:
    needs: [pr_build]
    name: Deploy
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.pull_request.labels.*.name, 'deploy') }}
    steps:
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore npm cache
        uses: actions/cache@v2
        env:
          cache-name: cache-npm
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
            ${{ runner.os }}-

      - name: Set Image Tag
        if: ${{ contains(github.event.pull_request.labels.*.name, 'deploy') }}
        working-directory: ./setup/deploy
        run: |
          echo "IMAGE_TAG=$(node branch-hash.js)" >> $GITHUB_ENV

      - name: Deploy
        if: ${{ contains(github.event.pull_request.labels.*.name, 'deploy') }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-central-1
        working-directory: ./setup/deploy
        run: |
          npm ci
          npx cdk deploy --require-approval never -c branch=${IMAGE_TAG} -c deployId=${GITHUB_RUN_ID}

  pr_test:
    name: Test
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore npm cache
        uses: actions/cache@v2
        env:
          cache-name: cache-npm
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
            ${{ runner.os }}-

      - name: Restore node_modules cache
        uses: actions/cache@v2
        env:
          cache-name: cache-node_modules
        with:
          path: |
            node_modules
            client/node_modules
            server/node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm install

      - name: Test (client)
        run: npm run test:ci
        working-directory: client

      - name: Test (server)
        run: npm run test:ci
        if: success() || failure()
        working-directory: server

      - name: Test (nestjs)
        run: npm run test:ci
        if: success() || failure()
        working-directory: nestjs

      - name: Upload test report (client)
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: test-report-client
          path: reports/jest-junit-client.xml

      - name: Upload test report (server)
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: test-report-server
          path: reports/jest-junit-server.xml

      - name: Upload test report (nestjs)
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: test-report-nestjs
          path: reports/jest-junit-nestjs.xml

  pr_auto_label:
    name: Auto Label
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Auto Label
        uses: banyan/auto-label@1.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
